global s16 balancingtime
function u64 stringformat(u64 format, u64 arg1)
{
    if (format == "character_tails_0x%02x")
    {

        if(char.state == char.state.BALANCING1)
        {
          ++balancingtime
          if (balancingtime > 0) && (balancingtime <= 10) 
          {
			    format = "tails_balance_4"
				arg1 = (level.framecounter >> 0) % 1            
          }
          if (balancingtime > 10) && (balancingtime <= 20) 
          {
			    format = "tails_balance_5"
				arg1 = (level.framecounter >> 0) % 1                           
          }
          if (balancingtime > 20) && (balancingtime <= 30)
          {
			    format = "tails_balance_6"
				arg1 = (level.framecounter >> 0) % 1             
          }
          if (balancingtime > 30)
          {
			    format = "tails_balance_4"
				arg1 = (level.framecounter >> 0) % 1  
                balancingtime = 1             
          }
        }
        else if (char.state == char.state.BALANCING2)
        {
          ++balancingtime
          if (balancingtime > 0) && (balancingtime <= 10) 
          {
			    format = "tails_balance_0"
				arg1 = (level.framecounter >> 0) % 1            
          }
          if (balancingtime > 10) && (balancingtime <= 20) 
          {
			    format = "tails_balance_1"
				arg1 = (level.framecounter >> 0) % 1                           
          }
          if (balancingtime > 20) && (balancingtime <= 30)
          {
			    format = "tails_balance_2"
				arg1 = (level.framecounter >> 0) % 1             
          }
          if (balancingtime > 30) && (balancingtime <= 40)
          {
			    format = "tails_balance_3"
				arg1 = (level.framecounter >> 0) % 1  
                balancingtime = 1             
          }
          if (balancingtime > 40) 
          {
			    format = "tails_balance_0"
				arg1 = (level.framecounter >> 0) % 1  
                balancingtime = 1             
          }
        }
        else 
        {
            balancingtime = 0
        }
    }
    return base.stringformat(format, arg1)
}