include peelout/?
include sonic/?
include tails/?
include knuckles/?
include springtwirl/?
include falling/?

global u8 stt16bfx //Option for using STT 16 Bit sprites and sounds in DDZ
global u8 sonicspringtwirl // For defining when Sonic has touched the spring (or any other object that triggers the animation), likewise for the rest of the characters
global u8 tailsspringtwirl // Same as above
global u8 knucklesspringtwirl // Same as above 
global u8 sonicfall // Define when Sonic is in midair, same for the other characters
global u8 tailsfall // Same as above
global u8 knucklesfall // Same as above
global u8 animreset = 0 // To force functions to not call base animation functions in certain places, as that can break stuff
global u8 sonicvictoryanim // Option for disabling Sonic's custom victory animation


//# address-hook(0x010bba) end(0x010c8e)
function void Character.UpdateNormalState.Sonic()
{
	if (char.state == char.state.STRAIGHTJUMP)
	{
		sonicspringtwirl = 1
	}
	else
	{
		sonicspringtwirl = 0
	}
    Character.UpdateFallingSonic()
#if STANDALONE
 //Tweaked so that Super Sonic has top speed anims
	if (Game.getSetting(SETTING_SUPERFAST_RUNANIM) && abs(char.groundspeed) >= 0x0d00)
	{
		sonic.fastrunanim.timer = 30
		if (global.zone_act == 0x0c00) //Special Handling For DDZ
		{
		    if (stt16bfx == 1)
		    { 
                Character.DDZFlying.Sonic() //Just keep the code in a seperate function, less messy
		    }
			else if (stt16bfx == 0)
		    {
			    sonic.fastrunanim.timer = 0
			    superflystate = 0
			    animframe = 0
		    }
        }
		else if (global.zone_act != 0x0c00) 
	    {
		    superflystate = 0
		    animframe = 0
		    if (sonic.fastrunanim.timer > 0) 
		    {
		        if (abs(char.groundspeed) >= 0x0800)
			        --sonic.fastrunanim.timer
		        else
			        sonic.fastrunanim.timer = 0
		    }	
	    }
	}

#endif
    base.Character.UpdateNormalState.Sonic() //Call base function for compatibility with other mods
}

//# address-hook(0x0137c4) end(0x0138f4)
function void Character.UpdateNormalState.Tails()
{
	if (char.state == char.state.STRAIGHTJUMP)
	{
		tailsspringtwirl = 1
	}
	else
	{
		tailsspringtwirl = 0
	}
	Character.UpdateFallingTails()
	base.Character.UpdateNormalState.Tails()
}

//# address-hook(0x01656c) end(0x016640)
function void Character.UpdateNormalState.Knuckles()
{
	if (char.state == char.state.STRAIGHTJUMP)
	{
		knucklesspringtwirl = 1
	}
	else
	{
		knucklesspringtwirl = 0
	}
	Character.UpdateFallingKnuckles()
	base.Character.UpdateNormalState.Knuckles()
}

function void checkForBalancing() //Overhauled function to give all characters balancing states
{
    s8 balancing = 0
	if (char.flags & char.flag.ON_OBJECT)
	{
		// Standing on an object, get its address in RAM
		A1 = 0xffff0000 + char.object_standing_on

		// Some kind of "no balancing here" flag?
		//  -> I could not find any use-case for it, but using it in AIR for the mgz_spinwheeltrigger
		if ((u8[A1 + 0x2a] & 0x80) == 0)
		{

			D1.u16 = objA1.box_size.x + char.position.x.u16 - objA1.position.x.u16
			if (char.character == !CHARACTER_TAILS)
			{
			    D2.u16 = objA1.box_size.x * 2 - 2
				if (D1.s16 < 2)
	            {
				    balancing = -1 
				    if (D1.s16 < -4)
					    balancing = -2
			    }
			    else if (D1.s16 >= D2.s16)
			    {
				    balancing = 1
				    if (D1.s16 >= D2.s16 + 6)
					    balancing = 2
			    }
			}
 			else if (char.character == CHARACTER_TAILS) // Different check due to hitbox size of Tails
			{
			    D2.u16 = objA1.box_size.x * 2 - 4
				if (D1.s16 < 4)
	            {
				    balancing = -1 
				    if (D1.s16 < -6)
					    balancing = -2
			    }
			    else if (D1.s16 >= D2.s16)
			    {
				    balancing = 1
				    if (D1.s16 >= D2.s16 + 8)
					    balancing = 2
			    }
			}

		}
	}
	else
	{
		// Not on an object
		D3.u16 = char.position.x.u16
		Character.checkGroundEdgeCollision()

		if (D1.s16 >= 0x0c)
		{
			if (char.angle_sensor_1 == 0x03)
			{
				balancing = 1
				D3.u16 = char.position.x.u16 - 6
				Character.checkGroundEdgeCollision()
				if (D1.s16 >= 0x0c)
				balancing = 2
				
			}
			else if (char.angle_sensor_2 == 0x03)
			{
				balancing = -1
				D3.u16 = char.position.x.u16 + 6
				Character.checkGroundEdgeCollision()
				if (D1.s16 >= 0x0c)
				balancing = -2
			}
		}
	}

	if (balancing != 0)
	{
		// Set balancing state 1 or 2
		char.state = (abs(balancing) < 2) ? char.state.BALANCING1 : char.state.BALANCING2

		// Face left or right, depending on where we are balancing
		bool wasFacingLeft = (char.flags & char.flag.FACING_LEFT)
		bool nowFacingLeft = (balancing < 0)

		if (nowFacingLeft)
			char.flags |= char.flag.FACING_LEFT
		else
			char.flags &= ~char.flag.FACING_LEFT
	}
}

function void Character.DDZFlying.Sonic() // Split into a seperate function for easier editing
{
	if (control.pad1.pressed & CONTROL_ABC) 
	{   
		Audio.playAudio("Dash", AudioContext.CONTEXT_SOUND) //When you dash, play the Sonic Triple Trouble sound
	}
	if (control.pad1.state & CONTROL_ABC) 
	{
		superflystate = 0	  
    }
    if !(control.pad1.state & CONTROL_ABC)
	{

		if (control.pad1.state & CONTROL_UP)
		{
			superflystate = 3
			if (animframe != 9) 
			{
			    ++animframe
			}

		}
		else if (control.pad1.state & CONTROL_DOWN)
		{
			superflystate = 2
			if (animframe != 9) 
			{
			    ++animframe
			}
		}   
        else if !(control.pad1.state & CONTROL_UP || control.pad1.state & CONTROL_DOWN)
		{
			if (animframe != 0)
			{
				--animframe
			}
			if (animframe == 0)
			{
                superflystate = 1
			}
		}	   
			    
	}

}
function void Character.UpdateFallingSonic()
{
	bool sonic_chars_stand = (char.state == char.state.STANDING || char.state == char.state.LOOKING_UP || char.state == char.state.COWERING)
    bool sonic_chars_hurt = (char.state == char.state.FALLING_PANIC || char.state == char.state.GOT_HURT_PANIC || char.state == char.state.GOT_HURT)
    bool sonic_chars_transforming = (char.state.former == char.state.TAILS_TRANSFORM || char.state.former == char.state.TRANSFORMING)
	if (char.spindash != 0x80 && char.state != char.state.SPINDASH && char.state != char.state.ROLLING && !char.rotation.x && char.state <= 0x08 && (char.flags & char.flag.IN_AIR))
	{
	    if (sonic_chars_transforming && (char.state == char.state.RUNNING) && char.velocity.y >= 0)
	    {
            sonicfall = 1
	    }
	    else if (!sonic_chars_hurt && !sonic_chars_transforming && char.rotation.x == 0 && (char.state == char.state.RUNNING || sonic_chars_stand) && char.velocity.y > 282)
	    {
            sonicfall = 1
	    }
		else
	    {
		    sonicfall = 0
	    }
	}
	else
	{
		sonicfall = 0
	}
}
function void Character.UpdateFallingTails()
{
	bool chars_stand = (char.state == char.state.STANDING || char.state == char.state.LOOKING_UP || char.state == char.state.COWERING)
    bool chars_hurt = (char.state == char.state.FALLING_PANIC || char.state == char.state.GOT_HURT_PANIC || char.state == char.state.GOT_HURT)
    bool chars_transforming = (char.state.former == char.state.TAILS_TRANSFORM || char.state.former == char.state.TRANSFORMING)
	if (char.spindash != 0x80 && char.state != char.state.SPINDASH && char.state != char.state.ROLLING && !char.rotation.x && char.state <= 0x08 && (char.flags & char.flag.IN_AIR))
	{
	    if (chars_transforming && (char.state == char.state.RUNNING) && char.velocity.y >= 0)
	    {
			tailsfall = 1
			animreset = 0
	    }
	    else if (!chars_hurt && !chars_transforming && char.rotation.x == 0 && (char.state == char.state.RUNNING || chars_stand) && char.velocity.y > 282)
	    {
			tailsfall = 1
			animreset = 0
	    }
		else
	    {
		    tailsfall = 0
	    }
	}
	else
	{
		tailsfall = 0
	}
}
function void Character.UpdateFallingKnuckles()
{
	bool knux_chars_stand = (char.state == char.state.STANDING || char.state == char.state.LOOKING_UP || char.state == char.state.COWERING)
    bool knux_chars_hurt = (char.state == char.state.FALLING_PANIC || char.state == char.state.GOT_HURT_PANIC || char.state == char.state.GOT_HURT)
    bool knux_chars_transforming = (char.state.former == char.state.TAILS_TRANSFORM || char.state.former == char.state.TRANSFORMING)
	if (char.spindash != 0x80 && char.state != char.state.SPINDASH && char.state != char.state.ROLLING && !char.rotation.x && char.state <= 0x08 && (char.flags & char.flag.IN_AIR))
	{
	    if (knux_chars_transforming && (char.state == char.state.RUNNING) && char.velocity.y >= 0)
	    {
			knucklesfall = 1
			animreset = 0
	    }
	    else if (!knux_chars_hurt && !knux_chars_transforming && char.rotation.x == 0 && (char.state == char.state.RUNNING || knux_chars_stand) && char.velocity.y > 282)
	    {
			knucklesfall = 1
			animreset = 0
	    }
		else
	    {
		    knucklesfall = 0
	    }
	}
	else
	{
		knucklesfall = 0
	}
}

// Fall Animation Reseting
// For certain level specific objects that do not store data in unique character states, and probably the running state instead

//# address-hook(0x03efba) end(0x03f018)
function void fn03efba() // Swinging Poles in MHZ
{
	sonicfall = 0
	tailsfall = 0
	knucklesfall = 0 
	base.fn03efba()
}

//# address-hook(0x03145a) end(0x0314d0)
function void fn03145a() // Conveyer Belt in HCZ
{
	// Update Sonic's animation while hanging on the conveyor belt (call this code to prevent things from breaking)

	if (u16[A1 + 0x1c] == 0)
	{
		D0.u8 = u8[A2 + 0x04]
		if (D0.u8 != 0)
		{
			if (D0.s8 < 0)
			{
				D0.u8 += 6
				if (D0.s8 > 0)
					D0 = 0
			}
			else
			{
				D0.u8 -= 6
				if (D0.s8 < 0)
					D0 = 0
			}
			u8[A2 + 0x04] = D0.u8
		}
	}
	else
	{
		u16[A1 + 0x1c] = 0
		D0.u8 = u8[A2 + 0x04] - 0x80
		if (D0.u8 != 0)
		{
			if (D0.s8 < 0)
			{
				D0.u8 += 6
				if (D0.s8 > 0)
					D0 = 0
			}
			else
			{
				D0.u8 -= 6
				if (D0.s8 < 0)
					D0 = 0
			}
			u8[A2 + 0x04] = D0.u8 + 0x80
		}
	}

	D0 = (u8[A2 + 0x04] >> 4) + u8[A2 + 0x08]
	u8[A1 + 0x22] = u8[0x0314d2 + D0.u16]		// Player characters' belt movement sprites
	D0.u16 &= 0x0f
	objA1.position.y.u16 = objA0.position.y.u16 + s8[0x0314f2 + D0.u16]
	sonicfall = 0
	tailsfall = 0
	knucklesfall = 0
	animreset = 1
}

//# address-hook(0x033bba)
function void fn033bba() // Cylinder in CNZ
{
	D0 = u8[A2]
	u8[A2] += 4
	LookupSinCos()
	D3.u16 = D1.u16
	D1.s16 >>= 2
	D1.u16 += objA0.position.x.u16
	D0 = u8[A1 + 0x1e]
	D0.s32 = s32(D0.s16) * D3.s16
	D0.s16 >>= 8
	D1.u16 += D0.u16
	objA1.position.x.u16 = D1.u16
	D0 = u8[A2]
	objA1.sprite_attributes &= ~sprite_attribute.PRIORITY
	if (D0.u8 >= 0x80)
	{
		objA1.sprite_attributes |= sprite_attribute.PRIORITY
	}
	D0.u8 += 0x40
	D0.s8 = -D0.s8
	D0.u16 &= 0xff
	D0.u16 = D0 / 0x0b
	u8[A1 + 0x22] = u8[0x033c1c + D0.u16]		// Player characters' pole spinning sprites
	u8[A1 + 0x20] = 0
	D0 = u8[A1 + 0x22]
	SetCharacterSpritePatterns()
	sonicfall = 0
	tailsfall = 0
	knucklesfall = 0
	animreset = 1
}

