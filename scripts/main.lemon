include balance
include victory
include sonic/idle

global u8 stt16bfx //Option for using STT 16 Bit sprites and sounds in DDZ
global u8 sonicspringtwirl // For defining when Sonic has touched the spring (or any other object that triggers the animation), likewise for the rest of the characters
global u8 tailsspringtwirl // Same as above
global u8 knucklesspringtwirl // Same as above 
global u8 fall // Define when Sonic or Knuckles is in midair
global u8 tailsfall // Custom Variable for partner tails
global u8 sonicvictoryanim // Option for disabling Sonic's custom victory animation
global u8 peeloutstyle // Sonic peelout style
global u8 suppeeloutstyle // Super peelout style
global u8 superflystate // Sonic TT 16 Bit Flying (DDZ Only) 
global u8 animframe // Current Frame of Animation (Only used for flying for now)
global u8 tailsvictoryanim
global s16 tailsvictoryframe
global s16 tailsbalancingtime
global u8 sonicvictoryframe


function bool Standalone.drawCharacterSprite(u8 character, u8 variant, s16 px, s16 py, bool asSmallGhost)
{
	bool isPlayer1 = (variant == 0)
	u32 characterAddress = isPlayer1 ? 0xffffb000 : 0xffffb04a

	// Check only needed for Tails' tails
	if (variant == 2)
	{
		// No smooth rotation in Slot Machine
		if (global.zone == 0x15)
			return false

		characterAddress = 0xffff0000 + u16[A0 + 0x30]

		// Do not render when blinking after hit
		if (u8[characterAddress + 0x34] != 0 && (u8[characterAddress + 0x34] & 0x04) == 0)
		{
			// Prevent emulator-like rendering
			return true
		}

		// Do not render when Tails looks into the background (e.g. LBZ 2 end cutscene) and in DEZ gravity transporters
		if (u8[characterAddress + 0x22] >= 0x55 && u8[characterAddress + 0x22] <= 0x5b)
		{
			// Prevent emulator-like rendering
			return true
		}

		isPlayer1 = (characterAddress == 0xffffb000)
		character = CHARACTER_TAILS
	}

	if (level.vertical_wrap == 0xff00)
	{
		// For vertically wrapping levels, "normalize" py into interval [-move_area.bottom.target * 3/4, -move_area.bottom.target * 1/4]
		py &= level.height.bitmask
		if (py > move_area.bottom.target * 3/4 && move_area.bottom.target >= 0xe0)	// move_area.bottom.target is very low in DEZ boss act
			py -= move_area.bottom.target
	}

	u8 animationSprite = char.animation.sprite
	u16 animationSpriteEx = Standalone.getModdedAnimationSpriteEx(character, animationSprite)
	u8 flags = (char.render_flags & 0x03)
	u8 angle = 0
	u64 key = Standalone.getModdedAnimationSpriteKey(character, animationSpriteEx)	
	u8 rotationMode = 0

	if (variant < 2)
	{
		if (character == CHARACTER_SONIC && animationSpriteEx == animationSprite)	// Last check is only false if modded scripts made their own changes  
		{
			// Special handling for Drop Dash & Super Peel-Out
			if (char.state == char.state.SONIC_DROPDASH)
			{
				animationSpriteEx = CHAR_ANIMSPRITE_SONIC_DROPDASH + (level.framecounter & 0x0F)
				key = stringformat("sonic_dropdash_default_%d", animationSpriteEx - CHAR_ANIMSPRITE_SONIC_DROPDASH)	
			}
	        else if (animationSprite >= 0x21 && animationSprite <= 0x30)
    	    {
    		    if (sonic.fastrunanim.timer > 0)
			    {

				    animationSpriteEx = CHAR_ANIMSPRITE_SONIC_PEELOUT + (level.framecounter & 0x03)
				    if (!Game.getSetting(SETTING_SMOOTH_ROTATION))
				    {
					    angle = (animationSprite - 0x21) / 4 * 0xe0
					    if (char.flags & char.flag.FACING_LEFT)
					    angle = -angle
					    animationSprite = 0x21 + (animationSprite - 0x21) % 4
				    }
			    }
		    }
			if (fall == 1 && !super.active)
			{
				if (char.state != char.state.GOT_HURT) // Make sure that the sprites don't show up when you take damage
				{
					animationSpriteEx = (level.framecounter >> 3) % 3
				    key = stringformat("sonic_fall_%d", animationSpriteEx)
				}
			}
			if (sonicspringtwirl == 1)
			{
				animationSpriteEx = (level.framecounter >> 3) % 5
				if (super.active)
				{
					key = stringformat("supersonic_twirl_%d", animationSpriteEx)
				}
				else 
				{
					key = stringformat("sonic_twirl_%d", animationSpriteEx)
				}
			}
	    }



		if (Game.getSetting(SETTING_SMOOTH_ROTATION))
		{
				if (animationSprite >= 0x01 && animationSprite <= 0x20)
			    {
				    // Walking animation
				    animationSprite = 0x01 + (animationSprite - 0x01) % 8
				    rotationMode = 1
			    }
			    else if (animationSprite >= 0x21 && animationSprite <= 0x30)
			    {
				    // Running animation
				    animationSprite = 0x21 + (animationSprite - 0x21) % 4
				    rotationMode = 1
			    }
			    else if (animationSprite >= 0x78 && animationSprite <= 0x7f)
			    {
				    // Swinging animation
				    animationSprite = 0x78
				    rotationMode = 2
			    }
			    else if (character == CHARACTER_TAILS && animationSprite >= 0xc3 && animationSprite <= 0xca)
			    {
				    // Tails' fastest run animation
				    animationSprite = 0xc3 + (animationSprite - 0xc3) % 2
				    rotationMode = 1
			    }
			    else if (character == CHARACTER_KNUCKLES && animationSprite == 0xc0)
			    {
				    // Only for DDZ
				    rotationMode = 1
			    }
			

			if (rotationMode != 0)
			{
				s8 oldRotation = isPlayer1 ? oldRotationPlayer1 : oldRotationPlayer2
				flags = char.flags & char.flag.FACING_LEFT		// This really has to be "char.flags", not "char.render_flags"

				angle = char.rotation
				if (rotationMode == 1)
				{
					if (abs(s8(char.rotation)) <= 0x10 && abs(s8(oldRotation)) <= 0x10)
					{
						angle = 0
					}

					if (angle != char.rotation)
					{
						s8 diff = angle - oldRotation
						angle = oldRotation + clamp(diff, -3, 3)
					}
				}
			}

			if (isPlayer1)
				oldRotationPlayer1 = angle
			else
				oldRotationPlayer2 = angle
		}
		if (character == CHARACTER_KNUCKLES) // Have to check for knuckles or else it will overwrite Super Sonic
		{
			if (super.active)
			{
                key = stringformat("character_superknuckles_0x%02x", animationSprite) // Don't Use animationSpriteEx unless it uses custom values, as it breaks rotation
				if (animationSprite == 0x56)
				{
					animationSpriteEx = (level.framecounter >> 3) % 3
					key = stringformat("character_superknuckles_standing_%d", animationSpriteEx)		
				}
			}
			if (abs(char.groundspeed) >= 0xa99)
            {
			    if (animationSprite >= 0x21 && animationSprite <= 0x30)
			    {
					animationSpriteEx = (level.framecounter & 0x03)
					if (super.active)
					{
						key = stringformat("superknuckles_dash_%d", animationSpriteEx)
					}
					else
					{
						key = stringformat("knuckles_dash_%d", animationSpriteEx)
					}
					if (!Game.getSetting(SETTING_SMOOTH_ROTATION))
				    {
					    angle = (animationSprite - 0x21) / 4 * 0xe0
					    if (char.flags & char.flag.FACING_LEFT)
					    angle = -angle
					    animationSprite = 0x21 + (animationSprite - 0x21) % 4
				    }				
			    }
			}
			if (knuckles.glideclimbstate & 0x02) && (animationSpriteEx == 0xc0)
            {
                animationSpriteEx = (level.framecounter >> 3) % 2
				if (super.active)
				{
					key = stringformat("superknux_glide_%d", animationSpriteEx)			
				}
				else
				{
					key = stringformat("knux_glide_%d", animationSpriteEx)
				}
            }
			if (fall == 1)
			{
				if (char.state != char.state.GOT_HURT) // Make sure that the sprites don't show up when you take damage
				{
					animationSprite = 0xcb
				}
			}
			if (knucklesspringtwirl == 1)
			{
				animationSpriteEx = (level.framecounter >> 3) % 5
				if (super.active)
				{
					key = stringformat("superknuckles_twirl_%d", animationSpriteEx)
				}
				else
				{
					key = stringformat("knuckles_twirl_%d", animationSpriteEx)
				}
			}
		}
		if (character == CHARACTER_TAILS)
		{
			if (super.active.tails)
		    {
                key = stringformat("character_supertails_0x%02x", animationSprite)
				if (animationSprite >= 0xad && animationSprite <= 0xaf)
				{
					animationSpriteEx = (level.framecounter >> 3) % 3
					key = stringformat("character_supertails_standing_%d", animationSpriteEx)		
				}
		    }
			if (abs(char.groundspeed) >= 0x0a99)
            {
			    if (animationSprite >= 0xc3 && animationSprite <= 0xca)
			    {
					animationSpriteEx = (level.framecounter & 0x03)
					if (super.active)
					{
						key = stringformat("supertails_dash_%d", animationSpriteEx)
					}
					else
					{
						key = stringformat("tails_dash_%d", animationSpriteEx)
					}
					if (!Game.getSetting(SETTING_SMOOTH_ROTATION))
				    {
					    angle = (animationSprite - 0xc3) / 4 * 0xe0
					    if (char.flags & char.flag.FACING_LEFT)
					    angle = -angle
					    animationSprite = 0xc3 + (animationSprite - 0xc3) % 4
				    }			
			    }
            }
			if (tailsfall == 1)
			{
				if (char.state != char.state.GOT_HURT) // Make sure that the sprites don't show up when you take damage
				{
					animationSpriteEx = (level.framecounter >> 3) % 4
				    key = stringformat("tails_fall_%d", animationSpriteEx)
				}
			}
			if (tailsspringtwirl = 1)
			{
				animationSpriteEx = (level.framecounter >> 3) % 5
				key = stringformat("tails_twirl_%d", animationSpriteEx)
			}
		}

		if (animationSpriteEx >= 0x100)
		{
			// Special handling for Super Peel-Out
			if (animationSpriteEx >= CHAR_ANIMSPRITE_SONIC_PEELOUT && sonic.fastrunanim.timer > 0)
			{
				if (super.active) 
			    {
			        if (superflystate == 0) 
			        {
				    if (suppeeloutstyle == 0) 
				    {
                        key = stringformat ("super_peelout_%d", animationSpriteEx - CHAR_ANIMSPRITE_SONIC_PEELOUT)
				    }
				    else if (suppeeloutstyle == 1) 
				    {
                        key = stringformat ("super_peelout_tt_%d", animationSpriteEx - CHAR_ANIMSPRITE_SONIC_PEELOUT)
				    }
			        }
			        else if (superflystate > 0) 
			        {
				        if (superflystate == 1) 
				        {
					        key = stringformat ("super_fly_%d", animationSpriteEx - CHAR_ANIMSPRITE_SONIC_PEELOUT)
				        }
				        else if (superflystate == 2)
				        {
					        if (animframe < 7) 
					        {
					            key = stringformat ("super_fly_down_pre_%d", animationSpriteEx - CHAR_ANIMSPRITE_SONIC_PEELOUT)
					        }
					        else if (animframe >= 7)
					        {
					            key = stringformat ("super_fly_down_%d", animationSpriteEx - CHAR_ANIMSPRITE_SONIC_PEELOUT)					
					        }
				        }
				        else if (superflystate == 3)
				        {
					        if (animframe < 7) 
					        {
					            key = stringformat ("super_fly_up_pre_%d", animationSpriteEx - CHAR_ANIMSPRITE_SONIC_PEELOUT)
					        }
					        else if (animframe >= 7)
					        {
					             key = stringformat ("super_fly_up_%d", animationSpriteEx - CHAR_ANIMSPRITE_SONIC_PEELOUT)					
					        }
				        }
			        }
			    } 
			    else if (!super.active) 
			    {
	                if (peeloutstyle == 0)
			        {
				        key = stringformat("sonic_peelout_default_%d", animationSpriteEx - CHAR_ANIMSPRITE_SONIC_PEELOUT)
			        }
			        else if (peeloutstyle == 1) 
			        {
				         key = stringformat("sonic_peelout_mania_%d", animationSpriteEx - CHAR_ANIMSPRITE_SONIC_PEELOUT)
			        }
			    }
			}   
			if (animationSpriteEx == CHAR_ANIMSPRITE_SONIC_DROPDASH) 
			{
				key = stringformat("sonic_dropdash_default_%d", animationSpriteEx - CHAR_ANIMSPRITE_SONIC_DROPDASH)		
			}								
		}		
		if (isPlayer1)
			timeattack.animSpriteEx = animationSpriteEx

			if (key == 0)
		{
			key = stringformat(stringformat("%s_0x%02x", getCharacterSpriteKey(character)), animationSprite)

			if (!Renderer.hasCustomSprite(key))
			{
				u32 sourceBase    = (character == CHARACTER_SONIC) ? ((animationSprite >= 0xda) ? 0x140060 : 0x100000) : (character == CHARACTER_TAILS) ? ((animationSprite >= 0xd1) ? 0x143d00 : 0x3200e0) : 0x1200e0
				u32 tableAddress  = (character == CHARACTER_SONIC) ? (super.active ? 0x148378 : 0x148182) : (character == CHARACTER_TAILS) ? 0x14a08a : 0x14bd0a
				u32 mappingOffset = (character == CHARACTER_SONIC) ? (super.active ? 0x146816 : 0x146620) : (character == CHARACTER_TAILS) ? 0x148eb8 : 0x14a8d6		// Not really necessary here, we could also use "char.mapping_offset"

				key = Renderer.setupCustomCharacterSprite(sourceBase, tableAddress, mappingOffset, animationSprite, 0x00)
			}
		}
	}
	else
	{
		if (Game.getSetting(SETTING_SMOOTH_ROTATION))
		{
			// Tails' tails
			if (animationSprite >= 0x05 && animationSprite <= 0x14)
			{
				animationSprite = 0x05 + (animationSprite - 0x05) % 4
				angle = lookupAngleByVector(s16[characterAddress + 0x18], s16[characterAddress + 0x1a])

				flags = 0
				if (objA0.flags2a & 0x01)
				{
					flags |= SPRITE_FLAG_FLIP_X
					angle += 0x80
				}
				if (global.inv_gravity)
				{
					flags ^= SPRITE_FLAG_FLIP_Y
					angle = -angle
				}
			}
		}

		key = stringformat(stringformat("%s_tails_0x%02x", getCharacterSpriteKey(CHARACTER_TAILS)), animationSprite)
		if (!Renderer.hasCustomSprite(key))
		{
			key = Renderer.setupCustomCharacterSprite(0x336620, 0x344d74, 0x344bb8, animationSprite, 0x00)
		}
	}

	u16 renderQueue = 0xa000 - char.sprite_priority
	u8 atex = (char.sprite_attributes >> 9) & 0x30
	if (EXTENDED_CHARACTER_PALETTES)
		atex = 0x40 + character * 0x20

	if (char.sprite_attributes & sprite_attribute.PRIORITY)
		flags |= SPRITE_FLAG_PRIO

	if (rotationMode != 0 && global.inv_gravity)
	{
		// Correction for inverse gravity
		angle = 128 - angle
		flags ^= SPRITE_FLAG_FLIP_X
	}

		if (ROMDataAnalyser.isEnabled())
	{
		string category = (variant < 2) ? getCharacterSpriteKey(character) : stringformat("%s_tails", getCharacterSpriteKey(CHARACTER_TAILS))
		Renderer.extractCustomSprite(key, category, animationSprite, atex)
	}

	// Render character
	if (asSmallGhost)
	{
		Renderer.drawCustomSprite(key, px, py, atex, flags | SPRITE_FLAG_PRIO, 0xa800, angle, 0xc0ffffff, 0x8000)
	}
	else
	{
		Renderer.drawCustomSprite(key, px, py, atex, flags, renderQueue, angle, 255)
	}

	bool useAfterImages
	if (isPlayer1)
	{
		if (super.active || super.active.tails)
		{
		   if ((super.active == 0xff) || (super.active.tails == 0xff))
		   {
                useAfterImages = true    
		   }
		   else 
		   {
		        if (sonic.fastrunanim.timer > 0)
			    {
                    useAfterImages = true
			    }
		   }

			   
		}
		else
		{
			if (Game.getSetting(SETTING_SPEEDUP_AFTERIMGS))
			{
				useAfterImages = ((u8[characterAddress + 0x2b] & char.bonus.SPEED_UP) != 0)
			}
		}
	}

	if (useAfterImages)
	{
		// Additional offset for Sonic charging a Super Peel-Out (either Hyper Sonic or with Speed Shoes)
		s16 afterImagesOffsetX = 0
		if (char.character == CHARACTER_SONIC && char.spindash == 0x80)
		{
			afterImagesOffsetX = (char.groundspeed >> 7) * ((char.flags & char.flag.FACING_LEFT) ? 1 : -1)
		}

		for (s8 i = 3; i > 0; --i)
		{
			A1 = 0xffffe500 + u8(posbackup.offset.player1 - (i * 8 + 4))
			s16 px0 = u16[A1] - camera.foreground.x.u16 + (i * afterImagesOffsetX / 4)
			s16 py0 = u16[A1+2] - camera.foreground.y.u16
			if (level.vertical_wrap == 0xff00)	// Consider vertical level wrap
				py0 &= level.height.bitmask
			Renderer.drawCustomSprite(key, px0, py0, atex, flags, renderQueue - i, angle, 192 - i * 32)
		}
	}

	// Prevent emulator-like rendering
	return true
	return base.Standalone.drawCharacterSprite(character, variant, px, py, asSmallGhost)
}


// Helper functions

function u64 getCharacterBonusTextIcon(u8 character)
{
	return (character == CHARACTER_KNUCKLES) ? "hud_bonus_icon_red" : (character == CHARACTER_TAILS) ? "hud_bonus_icon_orange" : "hud_bonus_icon_blue"
}


//# address-hook(0x010bba) end(0x010c8e)
function void Character.UpdateNormalState.Sonic()
{
	if (char.state == char.state.STRAIGHTJUMP)
	{
		sonicspringtwirl = 1
	}
	else
	{
		sonicspringtwirl = 0
	}
    Character.UpdateFallingSonicKnuckles()
#if STANDALONE
 //Tweaked so that Super Sonic has top speed anims
	if (Game.getSetting(SETTING_SUPERFAST_RUNANIM) && abs(char.groundspeed) >= 0x0d00)
	{
		sonic.fastrunanim.timer = 30
		if (global.zone_act == 0x0c00) //Special Handling For DDZ
		{
		    if (stt16bfx == 1)
		    { 
                Character.DDZFlying.Sonic() //Just keep the code in a seperate function, less messy
		    }
			else if (stt16bfx == 0)
		    {
			    sonic.fastrunanim.timer = 0
			    superflystate = 0
			    animframe = 0
		    }
        }
		else if (global.zone_act != 0x0c00) 
	    {
		    superflystate = 0
		    animframe = 0
		    if (sonic.fastrunanim.timer > 0) 
		    {
		        if (abs(char.groundspeed) >= 0x0800)
			        --sonic.fastrunanim.timer
		        else
			        sonic.fastrunanim.timer = 0
		    }	
	    }
	}

#endif
    base.Character.UpdateNormalState.Sonic() //Call base function for compatibility with other mods
}

//# address-hook(0x0137c4) end(0x0138f4)
function void Character.UpdateNormalState.Tails()
{
	if (char.state == char.state.STRAIGHTJUMP)
	{
		tailsspringtwirl = 1
	}
	else
	{
		tailsspringtwirl = 0
	}
	Character.UpdateFallingTails()
	base.Character.UpdateNormalState.Tails()
}

//# address-hook(0x01656c) end(0x016640)
function void Character.UpdateNormalState.Knuckles()
{
	if (char.state == char.state.STRAIGHTJUMP)
	{
		knucklesspringtwirl = 1
	}
	else
	{
		knucklesspringtwirl = 0
	}
	Character.UpdateFallingSonicKnuckles()
	base.Character.UpdateNormalState.Knuckles()
}

function void checkForBalancing() //Overhauled function to give all characters balancing states
{
    s8 balancing = 0
	if (char.flags & char.flag.ON_OBJECT)
	{
		// Standing on an object, get its address in RAM
		A1 = 0xffff0000 + char.object_standing_on

		// Some kind of "no balancing here" flag?
		//  -> I could not find any use-case for it, but using it in AIR for the mgz_spinwheeltrigger
		if ((u8[A1 + 0x2a] & 0x80) == 0)
		{

			D1.u16 = objA1.box_size.x + char.position.x.u16 - objA1.position.x.u16
			if (char.character == !CHARACTER_TAILS)
			{
			    D2.u16 = objA1.box_size.x * 2 - 2
				if (D1.s16 < 2)
	            {
				    balancing = -1 
				    if (D1.s16 < -4)
					    balancing = -2
			    }
			    else if (D1.s16 >= D2.s16)
			    {
				    balancing = 1
				    if (D1.s16 >= D2.s16 + 6)
					    balancing = 2
			    }
			}
 			else if (char.character == CHARACTER_TAILS) // Different check due to hitbox size of Tails
			{
			    D2.u16 = objA1.box_size.x * 2 - 4
				if (D1.s16 < 4)
	            {
				    balancing = -1 
				    if (D1.s16 < -6)
					    balancing = -2
			    }
			    else if (D1.s16 >= D2.s16)
			    {
				    balancing = 1
				    if (D1.s16 >= D2.s16 + 8)
					    balancing = 2
			    }
			}

		}
	}
	else
	{
		// Not on an object
		D3.u16 = char.position.x.u16
		Character.checkGroundEdgeCollision()

		if (D1.s16 >= 0x0c)
		{
			if (char.angle_sensor_1 == 0x03)
			{
				balancing = 1
				D3.u16 = char.position.x.u16 - 6
				Character.checkGroundEdgeCollision()
				if (D1.s16 >= 0x0c)
				balancing = 2
				
			}
			else if (char.angle_sensor_2 == 0x03)
			{
				balancing = -1
				D3.u16 = char.position.x.u16 + 6
				Character.checkGroundEdgeCollision()
				if (D1.s16 >= 0x0c)
				balancing = -2
			}
		}
	}

	if (balancing != 0)
	{
		// Set balancing state 1 or 2
		char.state = (abs(balancing) < 2) ? char.state.BALANCING1 : char.state.BALANCING2

		// Face left or right, depending on where we are balancing
		bool wasFacingLeft = (char.flags & char.flag.FACING_LEFT)
		bool nowFacingLeft = (balancing < 0)

		if (nowFacingLeft)
			char.flags |= char.flag.FACING_LEFT
		else
			char.flags &= ~char.flag.FACING_LEFT
	}
}

function void Character.DDZFlying.Sonic() // Split into a seperate function for easier editing
{
	if (control.pad1.pressed & CONTROL_ABC) 
	{   
		Audio.playAudio("Dash", AudioContext.CONTEXT_SOUND) //When you dash, play the Sonic Triple Trouble sound
	}
	if (control.pad1.state & CONTROL_ABC) 
	{
		superflystate = 0	  
    }
    if !(control.pad1.state & CONTROL_ABC)
	{

		if (control.pad1.state & CONTROL_UP)
		{
			superflystate = 3
			if (animframe != 9) 
			{
			    ++animframe
			}

		}
		else if (control.pad1.state & CONTROL_DOWN)
		{
			superflystate = 2
			if (animframe != 9) 
			{
			    ++animframe
			}
		}   
        else if !(control.pad1.state & CONTROL_UP || control.pad1.state & CONTROL_DOWN)
		{
			if (animframe != 0)
			{
				--animframe
			}
			if (animframe == 0)
			{
                superflystate = 1
			}
		}	   
			    
	}

}

function void Character.UpdateFallingSonicKnuckles()
{
	bool chars_stand = (char.state == char.state.STANDING || char.state == char.state.LOOKING_UP || char.state == char.state.COWERING)
    bool chars_hurt = (char.state == char.state.FALLING_PANIC || char.state == char.state.GOT_HURT_PANIC || char.state == char.state.GOT_HURT)
    bool chars_transforming = (char.state.former == char.state.TAILS_TRANSFORM || char.state.former == char.state.TRANSFORMING)
	if (char.spindash != 0x80 && char.state != char.state.SPINDASH && char.state != char.state.ROLLING && !char.rotation.x && char.state <= 0x08 && (char.flags & char.flag.IN_AIR))
	{
	    if (chars_transforming && (char.state == char.state.RUNNING) && char.velocity.y >= 0)
	    {
            fall = 1
	    }
	    else if (!chars_hurt && !chars_transforming && char.rotation.x == 0 && (char.state == char.state.RUNNING || chars_stand) && char.velocity.y > 282)
	    {
            fall = 1
	    }
		else
	    {
		    fall = 0
	    }
	}
	else
	{
		fall = 0
	}
}
function void Character.UpdateFallingTails()
{
	bool tails_chars_stand = (char.state == char.state.STANDING || char.state == char.state.LOOKING_UP || char.state == char.state.COWERING)
    bool tails_chars_hurt = (char.state == char.state.FALLING_PANIC || char.state == char.state.GOT_HURT_PANIC || char.state == char.state.GOT_HURT)
    bool tails_chars_transforming = (char.state.former == char.state.TAILS_TRANSFORM || char.state.former == char.state.TRANSFORMING)
	if (char.spindash != 0x80 && char.state != char.state.SPINDASH && char.state != char.state.ROLLING && !char.rotation.x && char.state <= 0x08 && (char.flags & char.flag.IN_AIR))
	{
	    if (tails_chars_transforming && (char.state == char.state.RUNNING) && char.velocity.y >= 0)
	    {
			tailsfall = 1
	    }
	    else if (!tails_chars_hurt && !tails_chars_transforming && char.rotation.x == 0 && (char.state == char.state.RUNNING || tails_chars_stand) && char.velocity.y > 282)
	    {
			tailsfall = 1
	    }
		else
	    {
		    tailsfall = 0
	    }
	}
	else
	{
		tailsfall = 0
	}
}


// Fall Animation Reseting
// For certain level specific objects that do not store data in unique character states, and probably the running state instead

//# address-hook(0x03efba) end(0x03f018)
function void fn03efba() // Swinging Poles in MHZ
{
	fall = 0
	tailsfall = 0
	base.fn03efba()
}

//# address-hook(0x03145a) end(0x0314d0)
function void fn03145a() // Conveyer Belt in HCZ
{
	fall = 0
	tailsfall = 0
	base.fn03145a()
}

//# address-hook(0x033bba)
function void fn033bba() // Cylinder in CNZ
{
	fall = 0
	tailsfall = 0
	base.fn033bba()
}

// When Sonic is in the egg mobile in LBZ 2
// Needs to update several functions to work properly

//# address-hook(0x08d29c) end(0x08d2b0)
function void fn08d29c() 
{
	fall = 0
	tailsfall = 0
	level.display_routine = A0.u16
	setupObjectAttributesFull(0x08d562)

	objA0.update_address = 0x08d2b6
	objA0.render_flags |= render_flag.FLIP_X
	fn08d2b6()
}

//# address-hook(0x08d2b6) end(0x08d33e)
function void fn08d2b6() 
{
	fall = 0
	tailsfall = 0
	base.fn08d2b6()
}
//# address-hook(0x08d370) end(0x08d384)
function void fn08d370()
{
	fall = 0
	tailsfall = 0
    base.fn08d370()
}